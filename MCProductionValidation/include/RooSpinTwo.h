/*****************************************************************************
* Project: RooFit                                                           *
*                                                                           *
* This code was autogenerated by RooClassFactory                            *
*****************************************************************************/

#ifndef ROOSPINTWO
#define ROOSPINTWO

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooRealVar.h"
#include "RooFormulaVar.h"
#include "RooAbsCategory.h"
#include "Riostream.h" 
#include <cmath>
#include <vector>
#include "TMath.h"

using namespace TMath;

class RooSpinTwo : public RooAbsPdf {
public:

  struct modelMeasurables{
    RooRealVar* h1;
    RooRealVar* h2;
    RooRealVar* Phi;
    RooRealVar* m1;
    RooRealVar* m2;
    RooRealVar* m12;
    RooRealVar* hs;
    RooRealVar* Phi1;
    //RooRealVar* Y;
  };
  struct modelParameters{
    RooRealVar* mX;
    RooRealVar* gamX;
    RooRealVar* mV;
    RooRealVar* gamV;
    RooRealVar* R1Val;
    RooRealVar* R2Val;

    RooAbsReal* bList[10][2];
    RooRealVar* Lambda;
    RooRealVar* f_spinz1; // Set to 1 for qqb production
    RooRealVar* f_spinz2; // Set to 0 for qqb production
    // There is no equivalent to graviton_qq_left/right
  };

  RooSpinTwo(){};
  RooSpinTwo(
    const char* name, const char* title,
    modelMeasurables _measurables,
    modelParameters _parameters
    );

  RooSpinTwo(const RooSpinTwo& other, const char* name=0);
  virtual TObject* clone(const char* newname) const = 0;
  inline virtual ~RooSpinTwo() {}

  virtual Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const = 0;
  virtual Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const = 0;

  virtual void setProxy(RooRealProxy& proxy, RooAbsReal* objectPtr);

protected:

  RooRealProxy h1;
  RooRealProxy h2;
  RooRealProxy Phi;
  RooRealProxy m1;
  RooRealProxy m2;
  RooRealProxy m12;
  RooRealProxy hs;
  RooRealProxy Phi1;
  RooRealProxy Y;

  RooRealProxy mX;
  RooRealProxy gamX;
  RooRealProxy mV;
  RooRealProxy gamV;
  RooRealProxy R1Val;
  RooRealProxy R2Val;

  RooRealProxy  b1Val;
  RooRealProxy  b2Val;
  RooRealProxy  b3Val;
  RooRealProxy  b4Val;
  RooRealProxy  b5Val;
  RooRealProxy  b6Val;
  RooRealProxy  b7Val;
  RooRealProxy  b8Val;
  RooRealProxy  b9Val;
  RooRealProxy  b10Val;

  RooRealProxy  b1ValIm;
  RooRealProxy  b2ValIm;
  RooRealProxy  b3ValIm;
  RooRealProxy  b4ValIm;
  RooRealProxy  b5ValIm;
  RooRealProxy  b6ValIm;
  RooRealProxy  b7ValIm;
  RooRealProxy  b8ValIm;
  RooRealProxy  b9ValIm;
  RooRealProxy  b10ValIm;

  RooRealProxy Lambda;

  RooRealProxy f_spinz1;
  RooRealProxy f_spinz2;

  virtual Double_t evaluate() const = 0;

  virtual void calculateCi(std::vector<Double_t>& ciRe, std::vector<Double_t>& ciIm) const;
  virtual void calculateAmplitudes(
    Double_t& A00Re, Double_t& A00Im,
    Double_t& AppRe, Double_t& AppIm, Double_t& A0pRe, Double_t& A0pIm, Double_t& Ap0Re, Double_t& Ap0Im,
    Double_t& AmmRe, Double_t& AmmIm, Double_t& A0mRe, Double_t& A0mIm, Double_t& Am0Re, Double_t& Am0Im,
    Double_t& ApmRe, Double_t& ApmIm, Double_t& AmpRe, Double_t& AmpIm
    ) const;

  virtual void setProxies(modelMeasurables _measurables);
};

#endif
